- name: Deploy Local TTS API with virtualenv
  hosts: tts_servers
  become: true

  vars:
    app_dir: /opt/tts-local
    venv_dir: /opt/tts-local/venv
    python_path: /opt/tts-local/venv/bin/python

  tasks:
    - name: Install required system packages
      community.general.pacman:
        name:
          - espeak-ng
          - python
          - python-pip
          - python-virtualenv
          - sof-firmware
          - alsa-utils
        state: present
        update_cache: true

    - name: Create app directory
      ansible.builtin.file:
        path: "{{ app_dir }}"
        state: directory
        mode: '0755'

    - name: Create virtual environment
      ansible.builtin.command: python -m venv {{ venv_dir }}
      args:
        creates: "{{ venv_dir }}/bin/activate"

    - name: Install Flask inside virtualenv
      ansible.builtin.pip:
        name: flask
        virtualenv: "{{ venv_dir }}"

    - name: Copy TTS server script
      ansible.builtin.copy:
        src: files/tts_server.py
        dest: "{{ app_dir }}/tts_server.py"
        owner: root
        group: root
        mode: '0755'

    - name: Set up alsa configuration
      ansible.builtin.copy:
        src: files/asound.conf
        dest: /etc/asound.conf
        mode: '0644'
      loop:
        - src: files/asound.state
          dest: /var/lib/alsa/asound.state
          mode: '0644'

    - name: Create systemd service
      ansible.builtin.template:
        src: templates/tts_local.service.j2
        dest: "{{ app_dir }}/tts_local.service"
        owner: root
        group: root
        mode: '0644'

    - name: Link systemd unit file
      ansible.builtin.file:
        src: "{{ app_dir }}/tts_local.service"
        dest: "/etc/systemd/system/tts_local.service"

    - name: Reload systemd
      ansible.builtin.systemd:
        daemon_reload: true

    - name: Enable and start the TTS service
      ansible.builtin.systemd:
        name: tts_local.service
        enabled: true
        state: restarted
